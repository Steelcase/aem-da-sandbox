/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/algoliasearch@5.35.0/dist/algoliasearch.umd.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).algoliasearch={})}(this,(function(e){"use strict";function r(){return{send:function(e){return new Promise((r=>{let t=new XMLHttpRequest;t.open(e.method,e.url,!0),Object.keys(e.headers).forEach((r=>t.setRequestHeader(r,e.headers[r])));let a,i=(e,a)=>setTimeout((()=>{t.abort(),r({status:0,content:a,isTimedOut:!0})}),e),n=i(e.connectTimeout,"Connection timeout");t.onreadystatechange=()=>{t.readyState>t.OPENED&&void 0===a&&(clearTimeout(n),a=i(e.responseTimeout,"Socket timeout"))},t.onerror=()=>{0===t.status&&(clearTimeout(n),clearTimeout(a),r({content:t.responseText||"Network request failed",status:t.status,isTimedOut:!1}))},t.onload=()=>{clearTimeout(n),clearTimeout(a),r({content:t.responseText,status:t.status,isTimedOut:!1})},t.send(e.data)}))}}}function t(e){let r,t=`algolia-client-js-${e.key}`;function a(){return void 0===r&&(r=e.localStorage||window.localStorage),r}function i(){return JSON.parse(a().getItem(t)||"{}")}function n(e){a().setItem(t,JSON.stringify(e))}return{get:(r,t,a={miss:()=>Promise.resolve()})=>Promise.resolve().then((()=>(function(){let r=e.timeToLive?1e3*e.timeToLive:null,t=i(),a=Object.fromEntries(Object.entries(t).filter((([,e])=>void 0!==e.timestamp)));n(a),r&&n(Object.fromEntries(Object.entries(a).filter((([,e])=>{let t=(new Date).getTime();return!(e.timestamp+r<t)}))))}(),i()[JSON.stringify(r)]))).then((e=>Promise.all([e?e.value:t(),void 0!==e]))).then((([e,r])=>Promise.all([e,r||a.miss(e)]))).then((([e])=>e)),set:(e,r)=>Promise.resolve().then((()=>{let n=i();return n[JSON.stringify(e)]={timestamp:(new Date).getTime(),value:r},a().setItem(t,JSON.stringify(n)),r})),delete:e=>Promise.resolve().then((()=>{let r=i();delete r[JSON.stringify(e)],a().setItem(t,JSON.stringify(r))})),clear:()=>Promise.resolve().then((()=>{a().removeItem(t)}))}}function a(e){let r=[...e.caches],t=r.shift();return void 0===t?{get:(e,r,t={miss:()=>Promise.resolve()})=>r().then((e=>Promise.all([e,t.miss(e)]))).then((([e])=>e)),set:(e,r)=>Promise.resolve(r),delete:e=>Promise.resolve(),clear:()=>Promise.resolve()}:{get:(e,i,n={miss:()=>Promise.resolve()})=>t.get(e,i,n).catch((()=>a({caches:r}).get(e,i,n))),set:(e,i)=>t.set(e,i).catch((()=>a({caches:r}).set(e,i))),delete:e=>t.delete(e).catch((()=>a({caches:r}).delete(e))),clear:()=>t.clear().catch((()=>a({caches:r}).clear()))}}function i(e={serializable:!0}){let r={};return{get(t,a,i={miss:()=>Promise.resolve()}){let n=JSON.stringify(t);if(n in r)return Promise.resolve(e.serializable?JSON.parse(r[n]):r[n]);let s=a();return s.then((e=>i.miss(e))).then((()=>s))},set:(t,a)=>(r[JSON.stringify(t)]=e.serializable?JSON.stringify(a):a,Promise.resolve(a)),delete:e=>(delete r[JSON.stringify(e)],Promise.resolve()),clear:()=>(r={},Promise.resolve())}}function n(e,r,t="WithinHeaders"){let a={"x-algolia-api-key":r,"x-algolia-application-id":e};return{headers:()=>"WithinHeaders"===t?a:{},queryParameters:()=>"WithinQueryParameters"===t?a:{}}}function s({func:e,validate:r,aggregator:t,error:a,timeout:i=()=>0}){let n=s=>new Promise(((o,d)=>{e(s).then((async e=>(t&&await t(e),await r(e)?o(e):a&&await a.validate(e)?d(new Error(await a.message(e))):setTimeout((()=>{n(e).then(o).catch(d)}),await i())))).catch((e=>{d(e)}))}));return n()}function o({algoliaAgents:e,client:r,version:t}){let a=function(e){let r={value:`Algolia for JavaScript (${e})`,add(e){let t=`; ${e.segment}${void 0!==e.version?` (${e.version})`:""}`;return-1===r.value.indexOf(t)&&(r.value=`${r.value}${t}`),r}};return r}(t).add({segment:r,version:t});return e.forEach((e=>a.add(e))),a}function d(){return{debug:(e,r)=>Promise.resolve(),info:(e,r)=>Promise.resolve(),error:(e,r)=>Promise.resolve()}}var l=12e4;function h(e,r="up"){let t=Date.now();return{...e,status:r,lastUpdate:t,isUp:function(){return"up"===r||Date.now()-t>l},isTimedOut:function(){return"timed out"===r&&Date.now()-t<=l}}}var u=class extends Error{name="AlgoliaError";constructor(e,r){super(e),r&&(this.name=r)}},c=class extends u{stackTrace;constructor(e,r,t){super(e,t),this.stackTrace=r}},m=class extends c{constructor(e){super("Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.",e,"RetryError")}},p=class extends c{status;constructor(e,r,t,a="ApiError"){super(e,t,a),this.status=r}},g=class extends u{response;constructor(e,r){super(e,"DeserializationError"),this.response=r}},w=class extends p{error;constructor(e,r,t,a){super(e,r,a,"DetailedApiError"),this.error=t}};function P(e){let r=e;for(let t=e.length-1;t>0;t--){let a=Math.floor(Math.random()*(t+1)),i=e[t];r[t]=e[a],r[a]=i}return r}function q(e,r,t){let a=function(e){return Object.keys(e).filter((r=>void 0!==e[r])).sort().map((r=>`${r}=${encodeURIComponent("[object Array]"===Object.prototype.toString.call(e[r])?e[r].join(","):e[r]).replace(/\+/g,"%20")}`)).join("&")}(t),i=`${e.protocol}://${e.url}${e.port?`:${e.port}`:""}/${"/"===r.charAt(0)?r.substring(1):r}`;return a.length&&(i+=`?${a}`),i}function f(e){let r=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return{...e,request:{...e.request,headers:{...e.request.headers,...r}}}}function y({hosts:e,hostsCache:r,baseHeaders:t,logger:a,baseQueryParameters:i,algoliaAgent:n,timeouts:s,requester:o,requestsCache:d,responsesCache:l}){async function u(d,l,u=!0){let c=[],P=function(e,r){if("GET"===e.method||void 0===e.data&&void 0===r.data)return;let t=Array.isArray(e.data)?e.data:{...e.data,...r.data};return JSON.stringify(t)}(d,l),y=function(e,r,t){let a={Accept:"application/json",...e,...r,...t},i={};return Object.keys(a).forEach((e=>{let r=a[e];i[e.toLowerCase()]=r})),i}(t,d.headers,l.headers),E="GET"===d.method?{...d.data,...l.data}:{},T={...i,...d.queryParameters,...E};if(n.value&&(T["x-algolia-agent"]=n.value),l&&l.queryParameters)for(let e of Object.keys(l.queryParameters))l.queryParameters[e]&&"[object Object]"!==Object.prototype.toString.call(l.queryParameters[e])?T[e]=l.queryParameters[e].toString():T[e]=l.queryParameters[e];let I=0,D=async(e,t)=>{let i=e.pop();if(void 0===i)throw new m(function(e){return e.map((e=>f(e)))}(c));let n={...s,...l.timeouts},E={data:P,headers:y,method:d.method,url:q(i,d.path,T),connectTimeout:t(I,n.connect),responseTimeout:t(I,u?n.read:n.write)},v=r=>{let t={request:E,response:r,host:i,triesLeft:e.length};return c.push(t),t},S=await o.send(E);if(function({isTimedOut:e,status:r}){return e||function({isTimedOut:e,status:r}){return!e&&!~~r}({isTimedOut:e,status:r})||2!=~~(r/100)&&4!=~~(r/100)}(S)){let n=v(S);return S.isTimedOut&&I++,a.info("Retryable failure",f(n)),await r.set(i,h(i,S.isTimedOut?"timed out":"down")),D(e,t)}if(function({status:e}){return 2==~~(e/100)}(S))return function(e){try{return JSON.parse(e.content)}catch(r){throw new g(r.message,e)}}(S);throw v(S),function({content:e,status:r},t){try{let a=JSON.parse(e);return"error"in a?new w(a.message,r,a.error,t):new p(a.message,r,t)}catch{}return new p(e,r,t)}(S,c)},v=e.filter((e=>"readWrite"===e.accept||(u?"read"===e.accept:"write"===e.accept))),S=await async function(e){let t=await Promise.all(e.map((e=>r.get(e,(()=>Promise.resolve(h(e))))))),a=t.filter((e=>e.isUp())),i=t.filter((e=>e.isTimedOut())),n=[...a,...i];return{hosts:n.length>0?n:e,getTimeout:(e,r)=>(0===i.length&&0===e?1:i.length+3+e)*r}}(v);return D([...S.hosts].reverse(),S.getTimeout)}return{hostsCache:r,requester:o,timeouts:s,logger:a,algoliaAgent:n,baseHeaders:t,baseQueryParameters:i,hosts:e,request:function(e,r={}){let a=e.useReadTransporter||"GET"===e.method;if(!a)return u(e,r,a);let n=()=>u(e,r);if(!0!==(r.cacheable||e.cacheable))return n();let s={request:e,requestOptions:r,transporter:{queryParameters:i,headers:t}};return l.get(s,(()=>d.get(s,(()=>d.set(s,n()).then((e=>Promise.all([d.delete(s),e])),(e=>Promise.all([d.delete(s),Promise.reject(e)]))).then((([e,r])=>r))))),{miss:e=>l.set(s,e)})},requestsCache:d,responsesCache:l}}var E="1.1.0",T=["de","us"];function I(e){return[{url:e?"analytics.{region}.algolia.com".replace("{region}",e):"analytics.algolia.com",accept:"readWrite",protocol:"https"}]}function D(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(l&&("string"!=typeof l||!T.includes(l)))throw new Error(`\`region\` must be one of the following: ${T.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:I(i),...s,algoliaAgent:o({algoliaAgents:a,client:"AbtestingV3",version:E}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw new Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw new Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw new Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.metrics)throw new Error("Parameter `addABTestsRequest.metrics` is required when calling `addABTests`.");if(!e.endAt)throw new Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");let t={method:"POST",path:"/3/abtests",queryParameters:{},headers:{},data:e};return l.request(t,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `deleteABTest`.");let t={method:"DELETE",path:"/3/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},estimateABTest(e,r){if(!e)throw new Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw new Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw new Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");let t={method:"POST",path:"/3/abtests/estimate",queryParameters:{},headers:{},data:e};return l.request(t,r)},getABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `getABTest`.");let t={method:"GET",path:"/3/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getTimeseries({id:e,startDate:r,endDate:t,metric:a},i){if(!e)throw new Error("Parameter `id` is required when calling `getTimeseries`.");let n="/3/abtests/{id}/timeseries".replace("{id}",encodeURIComponent(e)),s={};void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.metric=a.toString());let o={method:"GET",path:n,queryParameters:s,headers:{}};return l.request(o,i)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a,direction:i}={},n=void 0){let s={};void 0!==e&&(s.offset=e.toString()),void 0!==r&&(s.limit=r.toString()),void 0!==t&&(s.indexPrefix=t.toString()),void 0!==a&&(s.indexSuffix=a.toString()),void 0!==i&&(s.direction=i.toString());let o={method:"GET",path:"/3/abtests",queryParameters:s,headers:{}};return l.request(o,n)},scheduleABTest(e,r){if(!e)throw new Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw new Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw new Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.metrics)throw new Error("Parameter `scheduleABTestsRequest.metrics` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw new Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw new Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");let t={method:"POST",path:"/3/abtests/schedule",queryParameters:{},headers:{},data:e};return l.request(t,r)},stopABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `stopABTest`.");let t={method:"POST",path:"/3/abtests/{id}/stop".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${E}-${e}`}),i()]}),...h})}var v="5.35.0",S=["de","us"];function x(e){return[{url:e?"analytics.{region}.algolia.com".replace("{region}",e):"analytics.algolia.com",accept:"readWrite",protocol:"https"}]}function b(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(l&&("string"!=typeof l||!S.includes(l)))throw new Error(`\`region\` must be one of the following: ${S.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:x(i),...s,algoliaAgent:o({algoliaAgents:a,client:"Abtesting",version:v}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw new Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw new Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw new Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.endAt)throw new Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");let t={method:"POST",path:"/2/abtests",queryParameters:{},headers:{},data:e};return l.request(t,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `deleteABTest`.");let t={method:"DELETE",path:"/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},estimateABTest(e,r){if(!e)throw new Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw new Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw new Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");let t={method:"POST",path:"/2/abtests/estimate",queryParameters:{},headers:{},data:e};return l.request(t,r)},getABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `getABTest`.");let t={method:"GET",path:"/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a}={},i=void 0){let n={};void 0!==e&&(n.offset=e.toString()),void 0!==r&&(n.limit=r.toString()),void 0!==t&&(n.indexPrefix=t.toString()),void 0!==a&&(n.indexSuffix=a.toString());let s={method:"GET",path:"/2/abtests",queryParameters:n,headers:{}};return l.request(s,i)},scheduleABTest(e,r){if(!e)throw new Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw new Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw new Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw new Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw new Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");let t={method:"POST",path:"/2/abtests/schedule",queryParameters:{},headers:{},data:e};return l.request(t,r)},stopABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `stopABTest`.");let t={method:"POST",path:"/2/abtests/{id}/stop".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${v}-${e}`}),i()]}),...h})}var k="5.35.0",R=["de","us"];function C(e){return[{url:e?"analytics.{region}.algolia.com".replace("{region}",e):"analytics.algolia.com",accept:"readWrite",protocol:"https"}]}function A(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(l&&("string"!=typeof l||!R.includes(l)))throw new Error(`\`region\` must be one of the following: ${R.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:C(i),...s,algoliaAgent:o({algoliaAgents:a,client:"Analytics",version:k}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},getAddToCartRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getAddToCartRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/conversions/addToCartRate",queryParameters:n,headers:{}};return l.request(s,i)},getAverageClickPosition({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getAverageClickPosition`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/clicks/averageClickPosition",queryParameters:n,headers:{}};return l.request(s,i)},getClickPositions({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getClickPositions`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/clicks/positions",queryParameters:n,headers:{}};return l.request(s,i)},getClickThroughRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getClickThroughRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/clicks/clickThroughRate",queryParameters:n,headers:{}};return l.request(s,i)},getConversionRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getConversionRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/conversions/conversionRate",queryParameters:n,headers:{}};return l.request(s,i)},getNoClickRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getNoClickRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/searches/noClickRate",queryParameters:n,headers:{}};return l.request(s,i)},getNoResultsRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getNoResultsRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/searches/noResultRate",queryParameters:n,headers:{}};return l.request(s,i)},getPurchaseRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getPurchaseRate`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/conversions/purchaseRate",queryParameters:n,headers:{}};return l.request(s,i)},getRevenue({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getRevenue`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/conversions/revenue",queryParameters:n,headers:{}};return l.request(s,i)},getSearchesCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesCount`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/searches/count",queryParameters:n,headers:{}};return l.request(s,i)},getSearchesNoClicks({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:n},s){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoClicks`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==n&&(o.tags=n.toString());let d={method:"GET",path:"/2/searches/noClicks",queryParameters:o,headers:{}};return l.request(d,s)},getSearchesNoResults({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:n},s){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoResults`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==n&&(o.tags=n.toString());let d={method:"GET",path:"/2/searches/noResults",queryParameters:o,headers:{}};return l.request(d,s)},getStatus({index:e},r){if(!e)throw new Error("Parameter `index` is required when calling `getStatus`.");let t={};void 0!==e&&(t.index=e.toString());let a={method:"GET",path:"/2/status",queryParameters:t,headers:{}};return l.request(a,r)},getTopCountries({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:n},s){if(!e)throw new Error("Parameter `index` is required when calling `getTopCountries`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==n&&(o.tags=n.toString());let d={method:"GET",path:"/2/countries",queryParameters:o,headers:{}};return l.request(d,s)},getTopFilterAttributes({index:e,search:r,startDate:t,endDate:a,limit:i,offset:n,tags:s},o){if(!e)throw new Error("Parameter `index` is required when calling `getTopFilterAttributes`.");let d={};void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.search=r.toString()),void 0!==t&&(d.startDate=t.toString()),void 0!==a&&(d.endDate=a.toString()),void 0!==i&&(d.limit=i.toString()),void 0!==n&&(d.offset=n.toString()),void 0!==s&&(d.tags=s.toString());let h={method:"GET",path:"/2/filters",queryParameters:d,headers:{}};return l.request(h,o)},getTopFilterForAttribute({attribute:e,index:r,search:t,startDate:a,endDate:i,limit:n,offset:s,tags:o},d){if(!e)throw new Error("Parameter `attribute` is required when calling `getTopFilterForAttribute`.");if(!r)throw new Error("Parameter `index` is required when calling `getTopFilterForAttribute`.");let h="/2/filters/{attribute}".replace("{attribute}",encodeURIComponent(e)),u={};void 0!==r&&(u.index=r.toString()),void 0!==t&&(u.search=t.toString()),void 0!==a&&(u.startDate=a.toString()),void 0!==i&&(u.endDate=i.toString()),void 0!==n&&(u.limit=n.toString()),void 0!==s&&(u.offset=s.toString()),void 0!==o&&(u.tags=o.toString());let c={method:"GET",path:h,queryParameters:u,headers:{}};return l.request(c,d)},getTopFiltersNoResults({index:e,search:r,startDate:t,endDate:a,limit:i,offset:n,tags:s},o){if(!e)throw new Error("Parameter `index` is required when calling `getTopFiltersNoResults`.");let d={};void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.search=r.toString()),void 0!==t&&(d.startDate=t.toString()),void 0!==a&&(d.endDate=a.toString()),void 0!==i&&(d.limit=i.toString()),void 0!==n&&(d.offset=n.toString()),void 0!==s&&(d.tags=s.toString());let h={method:"GET",path:"/2/filters/noResults",queryParameters:d,headers:{}};return l.request(h,o)},getTopHits({index:e,search:r,clickAnalytics:t,revenueAnalytics:a,startDate:i,endDate:n,limit:s,offset:o,tags:d},h){if(!e)throw new Error("Parameter `index` is required when calling `getTopHits`.");let u={};void 0!==e&&(u.index=e.toString()),void 0!==r&&(u.search=r.toString()),void 0!==t&&(u.clickAnalytics=t.toString()),void 0!==a&&(u.revenueAnalytics=a.toString()),void 0!==i&&(u.startDate=i.toString()),void 0!==n&&(u.endDate=n.toString()),void 0!==s&&(u.limit=s.toString()),void 0!==o&&(u.offset=o.toString()),void 0!==d&&(u.tags=d.toString());let c={method:"GET",path:"/2/hits",queryParameters:u,headers:{}};return l.request(c,h)},getTopSearches({index:e,clickAnalytics:r,revenueAnalytics:t,startDate:a,endDate:i,orderBy:n,direction:s,limit:o,offset:d,tags:h},u){if(!e)throw new Error("Parameter `index` is required when calling `getTopSearches`.");let c={};void 0!==e&&(c.index=e.toString()),void 0!==r&&(c.clickAnalytics=r.toString()),void 0!==t&&(c.revenueAnalytics=t.toString()),void 0!==a&&(c.startDate=a.toString()),void 0!==i&&(c.endDate=i.toString()),void 0!==n&&(c.orderBy=n.toString()),void 0!==s&&(c.direction=s.toString()),void 0!==o&&(c.limit=o.toString()),void 0!==d&&(c.offset=d.toString()),void 0!==h&&(c.tags=h.toString());let m={method:"GET",path:"/2/searches",queryParameters:c,headers:{}};return l.request(m,u)},getUsersCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getUsersCount`.");let n={};void 0!==e&&(n.index=e.toString()),void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.tags=a.toString());let s={method:"GET",path:"/2/users/count",queryParameters:n,headers:{}};return l.request(s,i)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${k}-${e}`}),i()]}),...h})}var N="5.35.0",U=["de","us"];function O(e){return[{url:e?"insights.{region}.algolia.io".replace("{region}",e):"insights.algolia.io",accept:"readWrite",protocol:"https"}]}function j(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(l&&("string"!=typeof l||!U.includes(l)))throw new Error(`\`region\` must be one of the following: ${U.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:O(i),...s,algoliaAgent:o({algoliaAgents:a,client:"Insights",version:N}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteUserToken({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserToken`.");let t={method:"DELETE",path:"/1/usertokens/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},pushEvents(e,r){if(!e)throw new Error("Parameter `insightsEvents` is required when calling `pushEvents`.");if(!e.events)throw new Error("Parameter `insightsEvents.events` is required when calling `pushEvents`.");let t={method:"POST",path:"/1/events",queryParameters:{},headers:{},data:e};return l.request(t,r)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${N}-${e}`}),i()]}),...h})}var G="5.35.0",B=["eu","us"];function K(e){return[{url:"personalization.{region}.algolia.com".replace("{region}",e),accept:"readWrite",protocol:"https"}]}function $(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(!l||l&&("string"!=typeof l||!B.includes(l)))throw new Error(`\`region\` is required and must be one of the following: ${B.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:K(i),...s,algoliaAgent:o({algoliaAgents:a,client:"Personalization",version:G}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteUserProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserProfile`.");let t={method:"DELETE",path:"/1/profiles/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getPersonalizationStrategy:e=>l.request({method:"GET",path:"/1/strategies/personalization",queryParameters:{},headers:{}},e),getUserTokenProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `getUserTokenProfile`.");let t={method:"GET",path:"/1/profiles/personalization/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},setPersonalizationStrategy(e,r){if(!e)throw new Error("Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`.");if(!e.eventsScoring)throw new Error("Parameter `personalizationStrategyParams.eventsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.facetsScoring)throw new Error("Parameter `personalizationStrategyParams.facetsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.personalizationImpact)throw new Error("Parameter `personalizationStrategyParams.personalizationImpact` is required when calling `setPersonalizationStrategy`.");let t={method:"POST",path:"/1/strategies/personalization",queryParameters:{},headers:{},data:e};return l.request(t,r)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${G}-${e}`}),i()]}),...h})}var H="5.35.0",F=["eu","us"];function Q(e){return[{url:"query-suggestions.{region}.algolia.com".replace("{region}",e),accept:"readWrite",protocol:"https"}]}function W(e,s,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(!l||l&&("string"!=typeof l||!F.includes(l)))throw new Error(`\`region\` is required and must be one of the following: ${F.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...s}){let d=n(e,r,t),l=y({hosts:Q(i),...s,algoliaAgent:o({algoliaAgents:a,client:"QuerySuggestions",version:H}),baseHeaders:{"content-type":"text/plain",...d.headers(),...s.baseHeaders},baseQueryParameters:{...d.queryParameters(),...s.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},createConfig(e,r){if(!e)throw new Error("Parameter `configurationWithIndex` is required when calling `createConfig`.");let t={method:"POST",path:"/1/configs",queryParameters:{},headers:{},data:e};return l.request(t,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteConfig`.");let t={method:"DELETE",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getAllConfigs:e=>l.request({method:"GET",path:"/1/configs",queryParameters:{},headers:{}},e),getConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfig`.");let t={method:"GET",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getConfigStatus({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfigStatus`.");let t={method:"GET",path:"/1/configs/{indexName}/status".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getLogFile({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getLogFile`.");let t={method:"GET",path:"/1/logs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},updateConfig({indexName:e,configuration:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `updateConfig`.");if(!r)throw new Error("Parameter `configuration` is required when calling `updateConfig`.");if(!r.sourceIndices)throw new Error("Parameter `configuration.sourceIndices` is required when calling `updateConfig`.");let a={method:"PUT",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)}}}({appId:e,apiKey:s,region:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${H}-${e}`}),i()]}),...h})}var z="5.35.0";function L(e){return[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(P([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}]))}function M(e,l,h){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!l||"string"!=typeof l)throw new Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let d=n(e,r,t),l=y({hosts:L(e),...i,algoliaAgent:o({algoliaAgents:a,client:"Search",version:z}),baseHeaders:{"content-type":"text/plain",...d.headers(),...i.baseHeaders},baseQueryParameters:{...d.queryParameters(),...i.baseQueryParameters}});return{transporter:l,appId:e,apiKey:r,clearCache:()=>Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then((()=>{})),get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},waitForTask({indexName:e,taskID:r,maxRetries:t=50,timeout:a=e=>Math.min(200*e,5e3)},i){let n=0;return s({func:()=>this.getTask({indexName:e,taskID:r},i),validate:e=>"published"===e.status,aggregator:()=>n+=1,error:{validate:()=>n>=t,message:()=>`The maximum number of retries exceeded. (${n}/${t})`},timeout:()=>a(n)})},waitForAppTask({taskID:e,maxRetries:r=50,timeout:t=e=>Math.min(200*e,5e3)},a){let i=0;return s({func:()=>this.getAppTask({taskID:e},a),validate:e=>"published"===e.status,aggregator:()=>i+=1,error:{validate:()=>i>=r,message:()=>`The maximum number of retries exceeded. (${i}/${r})`},timeout:()=>t(i)})},waitForApiKey({operation:e,key:r,apiKey:t,maxRetries:a=50,timeout:i=e=>Math.min(200*e,5e3)},n){let o=0,d={aggregator:()=>o+=1,error:{validate:()=>o>=a,message:()=>`The maximum number of retries exceeded. (${o}/${a})`},timeout:()=>i(o)};if("update"===e){if(!t)throw new Error("`apiKey` is required when waiting for an `update` operation.");return s({...d,func:()=>this.getApiKey({key:r},n),validate:e=>{for(let r of Object.keys(t)){let a=t[r],i=e[r];if(Array.isArray(a)&&Array.isArray(i)){if(a.length!==i.length||a.some(((e,r)=>e!==i[r])))return!1}else if(a!==i)return!1}return!0}})}return s({...d,func:()=>this.getApiKey({key:r},n).catch((e=>{if(404!==e.status)throw e})),validate:r=>"add"===e?void 0!==r:void 0===r})},browseObjects({indexName:e,browseParams:r,...t},a){return s({func:t=>this.browse({indexName:e,browseParams:{cursor:t?t.cursor:void 0,hitsPerPage:1e3,...r}},a),validate:e=>void 0===e.cursor,...t})},browseRules({indexName:e,searchRulesParams:r,...t},a){let i={...r,hitsPerPage:r?.hitsPerPage||1e3};return s({func:r=>this.searchRules({indexName:e,searchRulesParams:{...i,page:r?r.page+1:i.page||0}},a),validate:e=>e.hits.length<i.hitsPerPage,...t})},browseSynonyms({indexName:e,searchSynonymsParams:r,...t},a){let i={...r,page:r?.page||0,hitsPerPage:1e3};return s({func:r=>{let t=this.searchSynonyms({indexName:e,searchSynonymsParams:{...i,page:i.page}},a);return i.page+=1,t},validate:e=>e.hits.length<i.hitsPerPage,...t})},async chunkedBatch({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:i=1e3},n){let s=[],o=[],d=r.entries();for(let[a,l]of d)s.push({action:t,body:l}),(s.length===i||a===r.length-1)&&(o.push(await this.batch({indexName:e,batchWriteParams:{requests:s}},n)),s=[]);if(a)for(let r of o)await this.waitForTask({indexName:e,taskID:r.taskID});return o},async saveObjects({indexName:e,objects:r,waitForTasks:t,batchSize:a},i){return await this.chunkedBatch({indexName:e,objects:r,action:"addObject",waitForTasks:t,batchSize:a},i)},async deleteObjects({indexName:e,objectIDs:r,waitForTasks:t,batchSize:a},i){return await this.chunkedBatch({indexName:e,objects:r.map((e=>({objectID:e}))),action:"deleteObject",waitForTasks:t,batchSize:a},i)},async partialUpdateObjects({indexName:e,objects:r,createIfNotExists:t,waitForTasks:a,batchSize:i},n){return await this.chunkedBatch({indexName:e,objects:r,action:t?"partialUpdateObject":"partialUpdateObjectNoCreate",batchSize:i,waitForTasks:a},n)},async replaceAllObjects({indexName:e,objects:r,batchSize:t,scopes:a},i){let n=`${e}_tmp_${Math.floor(1e6*Math.random())+1e5}`;void 0===a&&(a=["settings","rules","synonyms"]);try{let s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:n,scope:a}},i),o=await this.chunkedBatch({indexName:n,objects:r,waitForTasks:!0,batchSize:t},i);await this.waitForTask({indexName:n,taskID:s.taskID}),s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:n,scope:a}},i),await this.waitForTask({indexName:n,taskID:s.taskID});let d=await this.operationIndex({indexName:n,operationIndexParams:{operation:"move",destination:e}},i);return await this.waitForTask({indexName:n,taskID:d.taskID}),{copyOperationResponse:s,batchResponses:o,moveOperationResponse:d}}catch(e){throw await this.deleteIndex({indexName:n}),e}},async indexExists({indexName:e}){try{await this.getSettings({indexName:e})}catch(e){if(e instanceof p&&404===e.status)return!1;throw e}return!0},searchForHits(e,r){return this.search(e,r)},searchForFacets(e,r){return this.search(e,r)},addApiKey(e,r){if(!e)throw new Error("Parameter `apiKey` is required when calling `addApiKey`.");if(!e.acl)throw new Error("Parameter `apiKey.acl` is required when calling `addApiKey`.");let t={method:"POST",path:"/1/keys",queryParameters:{},headers:{},data:e};return l.request(t,r)},addOrUpdateObject({indexName:e,objectID:r,body:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `addOrUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `addOrUpdateObject`.");if(!t)throw new Error("Parameter `body` is required when calling `addOrUpdateObject`.");let i={method:"PUT",path:"/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t};return l.request(i,a)},appendSource(e,r){if(!e)throw new Error("Parameter `source` is required when calling `appendSource`.");if(!e.source)throw new Error("Parameter `source.source` is required when calling `appendSource`.");let t={method:"POST",path:"/1/security/sources/append",queryParameters:{},headers:{},data:e};return l.request(t,r)},assignUserId({xAlgoliaUserID:e,assignUserIdParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `assignUserId`.");if(!r)throw new Error("Parameter `assignUserIdParams` is required when calling `assignUserId`.");if(!r.cluster)throw new Error("Parameter `assignUserIdParams.cluster` is required when calling `assignUserId`.");let a={};void 0!==e&&(a["X-Algolia-User-ID"]=e.toString());let i={method:"POST",path:"/1/clusters/mapping",queryParameters:{},headers:a,data:r};return l.request(i,t)},batch({indexName:e,batchWriteParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `batch`.");if(!r)throw new Error("Parameter `batchWriteParams` is required when calling `batch`.");if(!r.requests)throw new Error("Parameter `batchWriteParams.requests` is required when calling `batch`.");let a={method:"POST",path:"/1/indexes/{indexName}/batch".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)},batchAssignUserIds({xAlgoliaUserID:e,batchAssignUserIdsParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `batchAssignUserIds`.");if(!r)throw new Error("Parameter `batchAssignUserIdsParams` is required when calling `batchAssignUserIds`.");if(!r.cluster)throw new Error("Parameter `batchAssignUserIdsParams.cluster` is required when calling `batchAssignUserIds`.");if(!r.users)throw new Error("Parameter `batchAssignUserIdsParams.users` is required when calling `batchAssignUserIds`.");let a={};void 0!==e&&(a["X-Algolia-User-ID"]=e.toString());let i={method:"POST",path:"/1/clusters/mapping/batch",queryParameters:{},headers:a,data:r};return l.request(i,t)},batchDictionaryEntries({dictionaryName:e,batchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `batchDictionaryEntries`.");if(!r)throw new Error("Parameter `batchDictionaryEntriesParams` is required when calling `batchDictionaryEntries`.");if(!r.requests)throw new Error("Parameter `batchDictionaryEntriesParams.requests` is required when calling `batchDictionaryEntries`.");let a={method:"POST",path:"/1/dictionaries/{dictionaryName}/batch".replace("{dictionaryName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)},browse({indexName:e,browseParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `browse`.");let a={method:"POST",path:"/1/indexes/{indexName}/browse".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0};return l.request(a,t)},clearObjects({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `clearObjects`.");let t={method:"POST",path:"/1/indexes/{indexName}/clear".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},clearRules({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearRules`.");let a="/1/indexes/{indexName}/rules/clear".replace("{indexName}",encodeURIComponent(e)),i={};void 0!==r&&(i.forwardToReplicas=r.toString());let n={method:"POST",path:a,queryParameters:i,headers:{}};return l.request(n,t)},clearSynonyms({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearSynonyms`.");let a="/1/indexes/{indexName}/synonyms/clear".replace("{indexName}",encodeURIComponent(e)),i={};void 0!==r&&(i.forwardToReplicas=r.toString());let n={method:"POST",path:a,queryParameters:i,headers:{}};return l.request(n,t)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(i,a)},deleteApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `deleteApiKey`.");let t={method:"DELETE",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},deleteBy({indexName:e,deleteByParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteBy`.");if(!r)throw new Error("Parameter `deleteByParams` is required when calling `deleteBy`.");let a={method:"POST",path:"/1/indexes/{indexName}/deleteByQuery".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)},deleteIndex({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteIndex`.");let t={method:"DELETE",path:"/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},deleteObject({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteObject`.");let a={method:"DELETE",path:"/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return l.request(a,t)},deleteRule({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteRule`.");let i="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==t&&(n.forwardToReplicas=t.toString());let s={method:"DELETE",path:i,queryParameters:n,headers:{}};return l.request(s,a)},deleteSource({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `deleteSource`.");let t={method:"DELETE",path:"/1/security/sources/{source}".replace("{source}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},deleteSynonym({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteSynonym`.");let i="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==t&&(n.forwardToReplicas=t.toString());let s={method:"DELETE",path:i,queryParameters:n,headers:{}};return l.request(s,a)},getApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `getApiKey`.");let t={method:"GET",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getAppTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getAppTask`.");let t={method:"GET",path:"/1/task/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getDictionaryLanguages:e=>l.request({method:"GET",path:"/1/dictionaries/*/languages",queryParameters:{},headers:{}},e),getDictionarySettings:e=>l.request({method:"GET",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{}},e),getLogs({offset:e,length:r,indexName:t,type:a}={},i=void 0){let n={};void 0!==e&&(n.offset=e.toString()),void 0!==r&&(n.length=r.toString()),void 0!==t&&(n.indexName=t.toString()),void 0!==a&&(n.type=a.toString());let s={method:"GET",path:"/1/logs",queryParameters:n,headers:{}};return l.request(s,i)},getObject({indexName:e,objectID:r,attributesToRetrieve:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getObject`.");let i="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==t&&(n.attributesToRetrieve=t.toString());let s={method:"GET",path:i,queryParameters:n,headers:{}};return l.request(s,a)},getObjects(e,r){if(!e)throw new Error("Parameter `getObjectsParams` is required when calling `getObjects`.");if(!e.requests)throw new Error("Parameter `getObjectsParams.requests` is required when calling `getObjects`.");let t={method:"POST",path:"/1/indexes/*/objects",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return l.request(t,r)},getRule({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getRule`.");let a={method:"GET",path:"/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return l.request(a,t)},getSettings({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getSettings`.");let t={method:"GET",path:"/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},getSources:e=>l.request({method:"GET",path:"/1/security/sources",queryParameters:{},headers:{}},e),getSynonym({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getSynonym`.");let a={method:"GET",path:"/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return l.request(a,t)},getTask({indexName:e,taskID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getTask`.");if(!r)throw new Error("Parameter `taskID` is required when calling `getTask`.");let a={method:"GET",path:"/1/indexes/{indexName}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{taskID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return l.request(a,t)},getTopUserIds:e=>l.request({method:"GET",path:"/1/clusters/mapping/top",queryParameters:{},headers:{}},e),getUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `getUserId`.");let t={method:"GET",path:"/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},hasPendingMappings({getClusters:e}={},r=void 0){let t={};void 0!==e&&(t.getClusters=e.toString());let a={method:"GET",path:"/1/clusters/mapping/pending",queryParameters:t,headers:{}};return l.request(a,r)},listApiKeys:e=>l.request({method:"GET",path:"/1/keys",queryParameters:{},headers:{}},e),listClusters:e=>l.request({method:"GET",path:"/1/clusters",queryParameters:{},headers:{}},e),listIndices({page:e,hitsPerPage:r}={},t=void 0){let a={};void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString());let i={method:"GET",path:"/1/indexes",queryParameters:a,headers:{}};return l.request(i,t)},listUserIds({page:e,hitsPerPage:r}={},t=void 0){let a={};void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString());let i={method:"GET",path:"/1/clusters/mapping",queryParameters:a,headers:{}};return l.request(i,t)},multipleBatch(e,r){if(!e)throw new Error("Parameter `batchParams` is required when calling `multipleBatch`.");if(!e.requests)throw new Error("Parameter `batchParams.requests` is required when calling `multipleBatch`.");let t={method:"POST",path:"/1/indexes/*/batch",queryParameters:{},headers:{},data:e};return l.request(t,r)},operationIndex({indexName:e,operationIndexParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `operationIndex`.");if(!r)throw new Error("Parameter `operationIndexParams` is required when calling `operationIndex`.");if(!r.operation)throw new Error("Parameter `operationIndexParams.operation` is required when calling `operationIndex`.");if(!r.destination)throw new Error("Parameter `operationIndexParams.destination` is required when calling `operationIndex`.");let a={method:"POST",path:"/1/indexes/{indexName}/operation".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)},partialUpdateObject({indexName:e,objectID:r,attributesToUpdate:t,createIfNotExists:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `partialUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `partialUpdateObject`.");if(!t)throw new Error("Parameter `attributesToUpdate` is required when calling `partialUpdateObject`.");let n="/1/indexes/{indexName}/{objectID}/partial".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==a&&(s.createIfNotExists=a.toString());let o={method:"POST",path:n,queryParameters:s,headers:{},data:t};return l.request(o,i)},removeUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `removeUserId`.");let t={method:"DELETE",path:"/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},replaceSources({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `replaceSources`.");let t={method:"PUT",path:"/1/security/sources",queryParameters:{},headers:{},data:e};return l.request(t,r)},restoreApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `restoreApiKey`.");let t={method:"POST",path:"/1/keys/{key}/restore".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return l.request(t,r)},saveObject({indexName:e,body:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `saveObject`.");if(!r)throw new Error("Parameter `body` is required when calling `saveObject`.");let a={method:"POST",path:"/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)},saveRule({indexName:e,objectID:r,rule:t,forwardToReplicas:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveRule`.");if(!t)throw new Error("Parameter `rule` is required when calling `saveRule`.");if(!t.objectID)throw new Error("Parameter `rule.objectID` is required when calling `saveRule`.");if(!t.consequence)throw new Error("Parameter `rule.consequence` is required when calling `saveRule`.");let n="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==a&&(s.forwardToReplicas=a.toString());let o={method:"PUT",path:n,queryParameters:s,headers:{},data:t};return l.request(o,i)},saveRules({indexName:e,rules:r,forwardToReplicas:t,clearExistingRules:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRules`.");if(!r)throw new Error("Parameter `rules` is required when calling `saveRules`.");let n="/1/indexes/{indexName}/rules/batch".replace("{indexName}",encodeURIComponent(e)),s={};void 0!==t&&(s.forwardToReplicas=t.toString()),void 0!==a&&(s.clearExistingRules=a.toString());let o={method:"POST",path:n,queryParameters:s,headers:{},data:r};return l.request(o,i)},saveSynonym({indexName:e,objectID:r,synonymHit:t,forwardToReplicas:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveSynonym`.");if(!t)throw new Error("Parameter `synonymHit` is required when calling `saveSynonym`.");if(!t.objectID)throw new Error("Parameter `synonymHit.objectID` is required when calling `saveSynonym`.");if(!t.type)throw new Error("Parameter `synonymHit.type` is required when calling `saveSynonym`.");let n="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==a&&(s.forwardToReplicas=a.toString());let o={method:"PUT",path:n,queryParameters:s,headers:{},data:t};return l.request(o,i)},saveSynonyms({indexName:e,synonymHit:r,forwardToReplicas:t,replaceExistingSynonyms:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonyms`.");if(!r)throw new Error("Parameter `synonymHit` is required when calling `saveSynonyms`.");let n="/1/indexes/{indexName}/synonyms/batch".replace("{indexName}",encodeURIComponent(e)),s={};void 0!==t&&(s.forwardToReplicas=t.toString()),void 0!==a&&(s.replaceExistingSynonyms=a.toString());let o={method:"POST",path:n,queryParameters:s,headers:{},data:r};return l.request(o,i)},search(e,r){if(e&&Array.isArray(e)&&(e={requests:e.map((({params:e,...r})=>"facet"===r.type?{...r,...e,type:"facet"}:{...r,...e,facet:void 0,maxFacetHits:void 0,facetQuery:void 0}))}),!e)throw new Error("Parameter `searchMethodParams` is required when calling `search`.");if(!e.requests)throw new Error("Parameter `searchMethodParams.requests` is required when calling `search`.");let t={method:"POST",path:"/1/indexes/*/queries",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return l.request(t,r)},searchDictionaryEntries({dictionaryName:e,searchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `searchDictionaryEntries`.");if(!r)throw new Error("Parameter `searchDictionaryEntriesParams` is required when calling `searchDictionaryEntries`.");if(!r.query)throw new Error("Parameter `searchDictionaryEntriesParams.query` is required when calling `searchDictionaryEntries`.");let a={method:"POST",path:"/1/dictionaries/{dictionaryName}/search".replace("{dictionaryName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r,useReadTransporter:!0,cacheable:!0};return l.request(a,t)},searchForFacetValues({indexName:e,facetName:r,searchForFacetValuesRequest:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchForFacetValues`.");if(!r)throw new Error("Parameter `facetName` is required when calling `searchForFacetValues`.");let i={method:"POST",path:"/1/indexes/{indexName}/facets/{facetName}/query".replace("{indexName}",encodeURIComponent(e)).replace("{facetName}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0};return l.request(i,a)},searchRules({indexName:e,searchRulesParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRules`.");let a={method:"POST",path:"/1/indexes/{indexName}/rules/search".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return l.request(a,t)},searchSingleIndex({indexName:e,searchParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSingleIndex`.");let a={method:"POST",path:"/1/indexes/{indexName}/query".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return l.request(a,t)},searchSynonyms({indexName:e,searchSynonymsParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSynonyms`.");let a={method:"POST",path:"/1/indexes/{indexName}/synonyms/search".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return l.request(a,t)},searchUserIds(e,r){if(!e)throw new Error("Parameter `searchUserIdsParams` is required when calling `searchUserIds`.");if(!e.query)throw new Error("Parameter `searchUserIdsParams.query` is required when calling `searchUserIds`.");let t={method:"POST",path:"/1/clusters/mapping/search",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return l.request(t,r)},setDictionarySettings(e,r){if(!e)throw new Error("Parameter `dictionarySettingsParams` is required when calling `setDictionarySettings`.");if(!e.disableStandardEntries)throw new Error("Parameter `dictionarySettingsParams.disableStandardEntries` is required when calling `setDictionarySettings`.");let t={method:"PUT",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{},data:e};return l.request(t,r)},setSettings({indexName:e,indexSettings:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `setSettings`.");if(!r)throw new Error("Parameter `indexSettings` is required when calling `setSettings`.");let i="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),n={};void 0!==t&&(n.forwardToReplicas=t.toString());let s={method:"PUT",path:i,queryParameters:n,headers:{},data:r};return l.request(s,a)},updateApiKey({key:e,apiKey:r},t){if(!e)throw new Error("Parameter `key` is required when calling `updateApiKey`.");if(!r)throw new Error("Parameter `apiKey` is required when calling `updateApiKey`.");if(!r.acl)throw new Error("Parameter `apiKey.acl` is required when calling `updateApiKey`.");let a={method:"PUT",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return l.request(a,t)}}}({appId:e,apiKey:l,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${z}-${e}`}),i()]}),...h})}var V="1.35.0",J=["eu","us"];function _(e){return[{url:"data.{region}.algolia.com".replace("{region}",e),accept:"readWrite",protocol:"https"}]}function X(e,l,h,u){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!l||"string"!=typeof l)throw new Error("`apiKey` is missing.");if(!h||h&&("string"!=typeof h||!J.includes(h)))throw new Error(`\`region\` is required and must be one of the following: ${J.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...d}){let l=n(e,r,t),h=y({hosts:_(i),...d,algoliaAgent:o({algoliaAgents:a,client:"Ingestion",version:V}),baseHeaders:{"content-type":"text/plain",...l.headers(),...d.baseHeaders},baseQueryParameters:{...l.queryParameters(),...d.baseQueryParameters}});return{transporter:h,appId:e,apiKey:r,clearCache:()=>Promise.all([h.requestsCache.clear(),h.responsesCache.clear()]).then((()=>{})),get _ua(){return h.algoliaAgent.value},addAlgoliaAgent(e,r){h.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?h.baseQueryParameters["x-algolia-api-key"]=e:h.baseHeaders["x-algolia-api-key"]=e},async chunkedPush({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:i=1e3,referenceIndexName:n},o){let d=[],l=0,h=[],u=Math.floor(i/10)||i,c=r.entries();for(let[m,p]of c)if(d.push(p),(d.length===i||m===r.length-1)&&(h.push(await this.push({indexName:e,pushTaskPayload:{action:t,records:d},referenceIndexName:n},o)),d=[]),a&&h.length>0&&(h.length%u==0||m===r.length-1)){for(let e of h.slice(l,l+u)){if(!e.eventID)throw new Error("received unexpected response from the push endpoint, eventID must not be undefined");let r=0;await s({func:async()=>{if(void 0===e.eventID||!e.eventID)throw new Error("received unexpected response from the push endpoint, eventID must not be undefined");return this.getEvent({runID:e.runID,eventID:e.eventID}).catch((e=>{if(404!==e.status)throw e}))},validate:e=>void 0!==e,aggregator:()=>r+=1,error:{validate:()=>r>=50,message:()=>`The maximum number of retries exceeded. (${r}/50)`},timeout:()=>Math.min(500*r,5e3)})}l+=u}return h},createAuthentication(e,r){if(!e)throw new Error("Parameter `authenticationCreate` is required when calling `createAuthentication`.");if(!e.type)throw new Error("Parameter `authenticationCreate.type` is required when calling `createAuthentication`.");if(!e.name)throw new Error("Parameter `authenticationCreate.name` is required when calling `createAuthentication`.");if(!e.input)throw new Error("Parameter `authenticationCreate.input` is required when calling `createAuthentication`.");let t={method:"POST",path:"/1/authentications",queryParameters:{},headers:{},data:e};return h.request(t,r)},createDestination(e,r){if(!e)throw new Error("Parameter `destinationCreate` is required when calling `createDestination`.");if(!e.type)throw new Error("Parameter `destinationCreate.type` is required when calling `createDestination`.");if(!e.name)throw new Error("Parameter `destinationCreate.name` is required when calling `createDestination`.");if(!e.input)throw new Error("Parameter `destinationCreate.input` is required when calling `createDestination`.");let t={method:"POST",path:"/1/destinations",queryParameters:{},headers:{},data:e};return h.request(t,r)},createSource(e,r){if(!e)throw new Error("Parameter `sourceCreate` is required when calling `createSource`.");if(!e.type)throw new Error("Parameter `sourceCreate.type` is required when calling `createSource`.");if(!e.name)throw new Error("Parameter `sourceCreate.name` is required when calling `createSource`.");let t={method:"POST",path:"/1/sources",queryParameters:{},headers:{},data:e};return h.request(t,r)},createTask(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTask`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTask`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTask`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTask`.");let t={method:"POST",path:"/2/tasks",queryParameters:{},headers:{},data:e};return h.request(t,r)},createTaskV1(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTaskV1`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.");if(!e.trigger)throw new Error("Parameter `taskCreate.trigger` is required when calling `createTaskV1`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTaskV1`.");let t={method:"POST",path:"/1/tasks",queryParameters:{},headers:{},data:e};return h.request(t,r)},createTransformation(e,r){if(!e)throw new Error("Parameter `transformationCreate` is required when calling `createTransformation`.");if(!e.name)throw new Error("Parameter `transformationCreate.name` is required when calling `createTransformation`.");let t={method:"POST",path:"/1/transformations",queryParameters:{},headers:{},data:e};return h.request(t,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return h.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return h.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return h.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return h.request(i,a)},deleteAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `deleteAuthentication`.");let t={method:"DELETE",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},deleteDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `deleteDestination`.");let t={method:"DELETE",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},deleteSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `deleteSource`.");let t={method:"DELETE",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},deleteTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTask`.");let t={method:"DELETE",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},deleteTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTaskV1`.");let t={method:"DELETE",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},deleteTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `deleteTransformation`.");let t={method:"DELETE",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},disableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTask`.");let t={method:"PUT",path:"/2/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},disableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTaskV1`.");let t={method:"PUT",path:"/1/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},enableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTask`.");let t={method:"PUT",path:"/2/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},enableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTaskV1`.");let t={method:"PUT",path:"/1/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `getAuthentication`.");let t={method:"GET",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `getDestination`.");let t={method:"GET",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getEvent({runID:e,eventID:r},t){if(!e)throw new Error("Parameter `runID` is required when calling `getEvent`.");if(!r)throw new Error("Parameter `eventID` is required when calling `getEvent`.");let a={method:"GET",path:"/1/runs/{runID}/events/{eventID}".replace("{runID}",encodeURIComponent(e)).replace("{eventID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return h.request(a,t)},getRun({runID:e},r){if(!e)throw new Error("Parameter `runID` is required when calling `getRun`.");let t={method:"GET",path:"/1/runs/{runID}".replace("{runID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `getSource`.");let t={method:"GET",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTask`.");let t={method:"GET",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTaskV1`.");let t={method:"GET",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},getTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `getTransformation`.");let t={method:"GET",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return h.request(t,r)},listAuthentications({itemsPerPage:e,page:r,type:t,platform:a,sort:i,order:n}={},s=void 0){let o={};void 0!==e&&(o.itemsPerPage=e.toString()),void 0!==r&&(o.page=r.toString()),void 0!==t&&(o.type=t.toString()),void 0!==a&&(o.platform=a.toString()),void 0!==i&&(o.sort=i.toString()),void 0!==n&&(o.order=n.toString());let d={method:"GET",path:"/1/authentications",queryParameters:o,headers:{}};return h.request(d,s)},listDestinations({itemsPerPage:e,page:r,type:t,authenticationID:a,transformationID:i,sort:n,order:s}={},o=void 0){let d={};void 0!==e&&(d.itemsPerPage=e.toString()),void 0!==r&&(d.page=r.toString()),void 0!==t&&(d.type=t.toString()),void 0!==a&&(d.authenticationID=a.toString()),void 0!==i&&(d.transformationID=i.toString()),void 0!==n&&(d.sort=n.toString()),void 0!==s&&(d.order=s.toString());let l={method:"GET",path:"/1/destinations",queryParameters:d,headers:{}};return h.request(l,o)},listEvents({runID:e,itemsPerPage:r,page:t,status:a,type:i,sort:n,order:s,startDate:o,endDate:d},l){if(!e)throw new Error("Parameter `runID` is required when calling `listEvents`.");let u="/1/runs/{runID}/events".replace("{runID}",encodeURIComponent(e)),c={};void 0!==r&&(c.itemsPerPage=r.toString()),void 0!==t&&(c.page=t.toString()),void 0!==a&&(c.status=a.toString()),void 0!==i&&(c.type=i.toString()),void 0!==n&&(c.sort=n.toString()),void 0!==s&&(c.order=s.toString()),void 0!==o&&(c.startDate=o.toString()),void 0!==d&&(c.endDate=d.toString());let m={method:"GET",path:u,queryParameters:c,headers:{}};return h.request(m,l)},listRuns({itemsPerPage:e,page:r,status:t,type:a,taskID:i,sort:n,order:s,startDate:o,endDate:d}={},l=void 0){let u={};void 0!==e&&(u.itemsPerPage=e.toString()),void 0!==r&&(u.page=r.toString()),void 0!==t&&(u.status=t.toString()),void 0!==a&&(u.type=a.toString()),void 0!==i&&(u.taskID=i.toString()),void 0!==n&&(u.sort=n.toString()),void 0!==s&&(u.order=s.toString()),void 0!==o&&(u.startDate=o.toString()),void 0!==d&&(u.endDate=d.toString());let c={method:"GET",path:"/1/runs",queryParameters:u,headers:{}};return h.request(c,l)},listSources({itemsPerPage:e,page:r,type:t,authenticationID:a,sort:i,order:n}={},s=void 0){let o={};void 0!==e&&(o.itemsPerPage=e.toString()),void 0!==r&&(o.page=r.toString()),void 0!==t&&(o.type=t.toString()),void 0!==a&&(o.authenticationID=a.toString()),void 0!==i&&(o.sort=i.toString()),void 0!==n&&(o.order=n.toString());let d={method:"GET",path:"/1/sources",queryParameters:o,headers:{}};return h.request(d,s)},listTasks({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,sourceType:n,destinationID:s,triggerType:o,withEmailNotifications:d,sort:l,order:u}={},c=void 0){let m={};void 0!==e&&(m.itemsPerPage=e.toString()),void 0!==r&&(m.page=r.toString()),void 0!==t&&(m.action=t.toString()),void 0!==a&&(m.enabled=a.toString()),void 0!==i&&(m.sourceID=i.toString()),void 0!==n&&(m.sourceType=n.toString()),void 0!==s&&(m.destinationID=s.toString()),void 0!==o&&(m.triggerType=o.toString()),void 0!==d&&(m.withEmailNotifications=d.toString()),void 0!==l&&(m.sort=l.toString()),void 0!==u&&(m.order=u.toString());let p={method:"GET",path:"/2/tasks",queryParameters:m,headers:{}};return h.request(p,c)},listTasksV1({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,destinationID:n,triggerType:s,sort:o,order:d}={},l=void 0){let u={};void 0!==e&&(u.itemsPerPage=e.toString()),void 0!==r&&(u.page=r.toString()),void 0!==t&&(u.action=t.toString()),void 0!==a&&(u.enabled=a.toString()),void 0!==i&&(u.sourceID=i.toString()),void 0!==n&&(u.destinationID=n.toString()),void 0!==s&&(u.triggerType=s.toString()),void 0!==o&&(u.sort=o.toString()),void 0!==d&&(u.order=d.toString());let c={method:"GET",path:"/1/tasks",queryParameters:u,headers:{}};return h.request(c,l)},listTransformations({itemsPerPage:e,page:r,sort:t,order:a}={},i=void 0){let n={};void 0!==e&&(n.itemsPerPage=e.toString()),void 0!==r&&(n.page=r.toString()),void 0!==t&&(n.sort=t.toString()),void 0!==a&&(n.order=a.toString());let s={method:"GET",path:"/1/transformations",queryParameters:n,headers:{}};return h.request(s,i)},push({indexName:e,pushTaskPayload:r,watch:t,referenceIndexName:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `push`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `push`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `push`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `push`.");let n="/1/push/{indexName}".replace("{indexName}",encodeURIComponent(e)),s={};void 0!==t&&(s.watch=t.toString()),void 0!==a&&(s.referenceIndexName=a.toString());let o={method:"POST",path:n,queryParameters:s,headers:{},data:r};return i={timeouts:{connect:18e4,read:18e4,write:18e4,...i?.timeouts}},h.request(o,i)},pushTask({taskID:e,pushTaskPayload:r,watch:t},a){if(!e)throw new Error("Parameter `taskID` is required when calling `pushTask`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `pushTask`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `pushTask`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `pushTask`.");let i="/2/tasks/{taskID}/push".replace("{taskID}",encodeURIComponent(e)),n={};void 0!==t&&(n.watch=t.toString());let s={method:"POST",path:i,queryParameters:n,headers:{},data:r};return a={timeouts:{connect:18e4,read:18e4,write:18e4,...a?.timeouts}},h.request(s,a)},runSource({sourceID:e,runSourcePayload:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `runSource`.");let a={method:"POST",path:"/1/sources/{sourceID}/run".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return h.request(a,t)},runTask({taskID:e,runTaskPayload:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `runTask`.");let a={method:"POST",path:"/2/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return h.request(a,t)},runTaskV1({taskID:e,runTaskPayload:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `runTaskV1`.");let a={method:"POST",path:"/1/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return h.request(a,t)},searchAuthentications(e,r){if(!e)throw new Error("Parameter `authenticationSearch` is required when calling `searchAuthentications`.");if(!e.authenticationIDs)throw new Error("Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.");let t={method:"POST",path:"/1/authentications/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},searchDestinations(e,r){if(!e)throw new Error("Parameter `destinationSearch` is required when calling `searchDestinations`.");if(!e.destinationIDs)throw new Error("Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.");let t={method:"POST",path:"/1/destinations/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},searchSources(e,r){if(!e)throw new Error("Parameter `sourceSearch` is required when calling `searchSources`.");if(!e.sourceIDs)throw new Error("Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.");let t={method:"POST",path:"/1/sources/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},searchTasks(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasks`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.");let t={method:"POST",path:"/2/tasks/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},searchTasksV1(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasksV1`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.");let t={method:"POST",path:"/1/tasks/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},searchTransformations(e,r){if(!e)throw new Error("Parameter `transformationSearch` is required when calling `searchTransformations`.");if(!e.transformationIDs)throw new Error("Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.");let t={method:"POST",path:"/1/transformations/search",queryParameters:{},headers:{},data:e};return h.request(t,r)},triggerDockerSourceDiscover({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.");let t={method:"POST",path:"/1/sources/{sourceID}/discover".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},h.request(t,r)},tryTransformation(e,r){if(!e)throw new Error("Parameter `transformationTry` is required when calling `tryTransformation`.");if(!e.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.");let t={method:"POST",path:"/1/transformations/try",queryParameters:{},headers:{},data:e};return h.request(t,r)},tryTransformationBeforeUpdate({transformationID:e,transformationTry:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.");if(!r)throw new Error("Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.");if(!r.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.");let a={method:"POST",path:"/1/transformations/{transformationID}/try".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateAuthentication({authenticationID:e,authenticationUpdate:r},t){if(!e)throw new Error("Parameter `authenticationID` is required when calling `updateAuthentication`.");if(!r)throw new Error("Parameter `authenticationUpdate` is required when calling `updateAuthentication`.");let a={method:"PATCH",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateDestination({destinationID:e,destinationUpdate:r},t){if(!e)throw new Error("Parameter `destinationID` is required when calling `updateDestination`.");if(!r)throw new Error("Parameter `destinationUpdate` is required when calling `updateDestination`.");let a={method:"PATCH",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateSource({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `updateSource`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `updateSource`.");let a={method:"PATCH",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateTask({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTask`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTask`.");let a={method:"PATCH",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateTaskV1({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTaskV1`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTaskV1`.");let a={method:"PATCH",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},updateTransformation({transformationID:e,transformationCreate:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `updateTransformation`.");if(!r)throw new Error("Parameter `transformationCreate` is required when calling `updateTransformation`.");if(!r.name)throw new Error("Parameter `transformationCreate.name` is required when calling `updateTransformation`.");let a={method:"PUT",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return h.request(a,t)},validateSource(e,r=void 0){let t={method:"POST",path:"/1/sources/validate",queryParameters:{},headers:{},data:e||{}};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},h.request(t,r)},validateSourceBeforeUpdate({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.");let a={method:"POST",path:"/1/sources/{sourceID}/validate".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return t={timeouts:{connect:18e4,read:18e4,write:18e4,...t?.timeouts}},h.request(a,t)}}}({appId:e,apiKey:l,region:h,timeouts:{connect:25e3,read:25e3,write:25e3},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${V}-${e}`}),i()]}),...u})}var Y="1.35.0";function Z(e,s,l){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let s=n(e,r,t),d=y({hosts:[{url:"status.algolia.com",accept:"readWrite",protocol:"https"}],...i,algoliaAgent:o({algoliaAgents:a,client:"Monitoring",version:Y}),baseHeaders:{"content-type":"text/plain",...s.headers(),...i.baseHeaders},baseQueryParameters:{...s.queryParameters(),...i.baseQueryParameters}});return{transporter:d,appId:e,apiKey:r,clearCache:()=>Promise.all([d.requestsCache.clear(),d.responsesCache.clear()]).then((()=>{})),get _ua(){return d.algoliaAgent.value},addAlgoliaAgent(e,r){d.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?d.baseQueryParameters["x-algolia-api-key"]=e:d.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return d.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return d.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return d.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return d.request(i,a)},getClusterIncidents({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterIncidents`.");let t={method:"GET",path:"/1/incidents/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return d.request(t,r)},getClusterStatus({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterStatus`.");let t={method:"GET",path:"/1/status/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return d.request(t,r)},getIncidents:e=>d.request({method:"GET",path:"/1/incidents",queryParameters:{},headers:{}},e),getIndexingTime({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getIndexingTime`.");let t={method:"GET",path:"/1/indexing/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return d.request(t,r)},getLatency({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getLatency`.");let t={method:"GET",path:"/1/latency/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return d.request(t,r)},getMetrics({metric:e,period:r},t){if(!e)throw new Error("Parameter `metric` is required when calling `getMetrics`.");if(!r)throw new Error("Parameter `period` is required when calling `getMetrics`.");let a={method:"GET",path:"/1/infrastructure/{metric}/period/{period}".replace("{metric}",encodeURIComponent(e)).replace("{period}",encodeURIComponent(r)),queryParameters:{},headers:{}};return d.request(a,t)},getReachability({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getReachability`.");let t={method:"GET",path:"/1/reachability/{clusters}/probes".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return d.request(t,r)},getServers:e=>d.request({method:"GET",path:"/1/inventory/servers",queryParameters:{},headers:{}},e),getStatus:e=>d.request({method:"GET",path:"/1/status",queryParameters:{},headers:{}},e)}}({appId:e,apiKey:s,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${Y}-${e}`}),i()]}),...l})}var ee="5.35.0";function re(e){return[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(P([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}]))}function te(e,s,l){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let s=n(e,r,t),d=y({hosts:re(e),...i,algoliaAgent:o({algoliaAgents:a,client:"Recommend",version:ee}),baseHeaders:{"content-type":"text/plain",...s.headers(),...i.baseHeaders},baseQueryParameters:{...s.queryParameters(),...i.baseQueryParameters}});return{transporter:d,appId:e,apiKey:r,clearCache:()=>Promise.all([d.requestsCache.clear(),d.responsesCache.clear()]).then((()=>{})),get _ua(){return d.algoliaAgent.value},addAlgoliaAgent(e,r){d.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?d.baseQueryParameters["x-algolia-api-key"]=e:d.baseHeaders["x-algolia-api-key"]=e},batchRecommendRules({indexName:e,model:r,recommendRule:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `batchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `batchRecommendRules`.");let i={method:"POST",path:"/1/indexes/{indexName}/{model}/recommend/rules/batch".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{}};return d.request(i,a)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let a={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return d.request(a,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let a={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return d.request(a,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let i={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return d.request(i,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let i={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return d.request(i,a)},deleteRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `deleteRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `deleteRecommendRule`.");let i={method:"DELETE",path:"/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return d.request(i,a)},getRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `getRecommendRule`.");let i={method:"GET",path:"/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return d.request(i,a)},getRecommendStatus({indexName:e,model:r,taskID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendStatus`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendStatus`.");if(!t)throw new Error("Parameter `taskID` is required when calling `getRecommendStatus`.");let i={method:"GET",path:"/1/indexes/{indexName}/{model}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{taskID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return d.request(i,a)},getRecommendations(e,r){if(e&&Array.isArray(e)&&(e={requests:e}),!e)throw new Error("Parameter `getRecommendationsParams` is required when calling `getRecommendations`.");if(!e.requests)throw new Error("Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.");let t={method:"POST",path:"/1/indexes/*/recommendations",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return d.request(t,r)},searchRecommendRules({indexName:e,model:r,searchRecommendRulesParams:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `searchRecommendRules`.");let i={method:"POST",path:"/1/indexes/{indexName}/{model}/recommend/rules/search".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0};return d.request(i,a)}}}({appId:e,apiKey:s,timeouts:{connect:1e3,read:2e3,write:3e4},logger:d(),requester:r(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:i(),requestsCache:i({serializable:!1}),hostsCache:a({caches:[t({key:`${ee}-${e}`}),i()]}),...l})}e.abtestingClient=b,e.abtestingV3Client=D,e.algoliasearch=function(e,r,t){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!r||"string"!=typeof r)throw new Error("`apiKey` is missing.");let a,i=M(e,r,t);if(t?.transformation){if(!t.transformation.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");a=X(e,r,t.transformation.region,t)}return{...i,async saveObjectsWithTransformation({indexName:e,objects:r,waitForTasks:i},n){if(!a)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(!t?.transformation?.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");return a.chunkedPush({indexName:e,objects:r,action:"addObject",waitForTasks:i},n)},async partialUpdateObjectsWithTransformation({indexName:e,objects:r,createIfNotExists:i,waitForTasks:n},s){if(!a)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(!t?.transformation?.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");return a.chunkedPush({indexName:e,objects:r,action:i?"partialUpdateObject":"partialUpdateObjectNoCreate",waitForTasks:n},s)},async replaceAllObjectsWithTransformation({indexName:e,objects:r,batchSize:i,scopes:n},s){if(!a)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(!t?.transformation?.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");let o=`${e}_tmp_${Math.floor(1e6*Math.random())+1e5}`;void 0===n&&(n=["settings","rules","synonyms"]);try{let t=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:n}},s),d=await a.chunkedPush({indexName:o,objects:r,waitForTasks:!0,batchSize:i,referenceIndexName:e},s);await this.waitForTask({indexName:o,taskID:t.taskID}),t=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:n}},s),await this.waitForTask({indexName:o,taskID:t.taskID});let l=await this.operationIndex({indexName:o,operationIndexParams:{operation:"move",destination:e}},s);return await this.waitForTask({indexName:o,taskID:l.taskID}),{copyOperationResponse:t,watchResponses:d,moveOperationResponse:l}}catch(e){throw await this.deleteIndex({indexName:o}),e}},get _ua(){return i.transporter.algoliaAgent.value},initAbtesting:t=>b(t.appId||e,t.apiKey||r,t.region,t.options),initAbtestingV3:t=>D(t.appId||e,t.apiKey||r,t.region,t.options),initAnalytics:t=>A(t.appId||e,t.apiKey||r,t.region,t.options),initIngestion:t=>X(t.appId||e,t.apiKey||r,t.region,t.options),initInsights:t=>j(t.appId||e,t.apiKey||r,t.region,t.options),initMonitoring:(t={})=>Z(t.appId||e,t.apiKey||r,t.options),initPersonalization:t=>$(t.appId||e,t.apiKey||r,t.region,t.options),initQuerySuggestions:t=>W(t.appId||e,t.apiKey||r,t.region,t.options),initRecommend:(t={})=>te(t.appId||e,t.apiKey||r,t.options)}},e.analyticsClient=A,e.apiClientVersion=z,e.ingestionClient=X,e.insightsClient=j,e.isOnDemandTrigger=function(e){return"onDemand"===e.type},e.isScheduleTrigger=function(e){return"schedule"===e.type},e.isSubscriptionTrigger=function(e){return"subscription"===e.type},e.monitoringClient=Z,e.personalizationClient=$,e.querySuggestionsClient=W,e.recommendClient=te,e.searchClient=M}));
//# sourceMappingURL=/sm/c065c34ec1613ddcb24cc4f8acbea6a3d0d2af5bef8dac988b6b28ab1117290d.map